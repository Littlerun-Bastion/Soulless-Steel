[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;
render_mode light_only;

uniform vec4 color : hint_color = vec4(1.0);
uniform float width : hint_range(0, 100) = 1.0;
uniform float margin_distance : hint_range(0, 100.0) = 0.0;

const vec4 MASK_COLOR = vec4(1.0, 0.0, 0.84, 1.0);

void vertex() {
	VERTEX += (UV * (2.0 + margin_distance) - (1.0 + margin_distance/2.0)) * width;
}

bool hasContraryNeighbour(vec2 uv, vec2 texture_pixel_size, sampler2D texture) {
	for (float i = -ceil(width); i <= ceil(width); i++) {
		float x = abs(i) > width ? width * sign(i) : i;
		float offset;
		
		/*
		if (pattern == 0) {
			offset = width - abs(x);
		} else if (pattern == 1) {
			offset = floor(sqrt(pow(width + 0.5, 2) - x * x));
		} else if (pattern == 2) {
			offset = width;
		}*/
		
		offset = width;
		
		for (float j = -ceil(offset); j <= ceil(offset); j++) {
			float y = abs(j) > offset ? offset * sign(j) : j;
			vec2 xy = uv + texture_pixel_size * vec2(x, y);
			
			if (!(xy != clamp(xy, vec2(0.0), vec2(1.0)) || texture(texture, xy).a == 0.0)) {
				return true;
			}
		}
	}
	
	return false;
}

void fragment() {
	vec2 uv = UV;
	
	vec2 texture_pixel_size = vec2(1.0) / (vec2(1.0) / TEXTURE_PIXEL_SIZE + vec2(width * 2.0));
	
	uv = (uv - texture_pixel_size * width) * TEXTURE_PIXEL_SIZE / texture_pixel_size;
	
	if (uv != clamp(uv, vec2(0.0), vec2(1.0))) {
		COLOR.a = 0.0;
	} else {
		COLOR = texture(TEXTURE, uv);
	}
	
	if ((COLOR.a <= 0.0) && hasContraryNeighbour(uv, TEXTURE_PIXEL_SIZE, TEXTURE)) {
		COLOR.rgb = MASK_COLOR.rgb;
		COLOR.a += (1.0 - COLOR.a) * color.a;
	}
	
	if (COLOR == MASK_COLOR) {
		COLOR = color;
	} else {
		COLOR.a = 0.0;
	}
}"

[resource]
shader = SubResource( 1 )
shader_param/color = Color( 1, 1, 1, 1 )
shader_param/width = 30.0
shader_param/margin_distance = 7.0
